¬°Claro! Aqu√≠ tienes un "cheat sheet" o chuleta para usuarios basado en el m√≥dulo `ShopifyMetaobjectLoader`. Esta gu√≠a r√°pida se enfoca en las operaciones m√°s comunes.

---

## Shopify Metaobject Loader: Cheat Sheet üöÄ

Esta gu√≠a r√°pida te ayudar√° a usar el m√≥dulo `ShopifyMetaobjectLoader` para interactuar con los metaobjetos de Shopify.

### üõ†Ô∏è Inicializaci√≥n

Primero, necesitas instanciar el `ShopifyMetaobjectLoader`:

```python
import os
from dotenv import load_dotenv
from shopify_metaobject_loader import ShopifyMetaobjectLoader, Metaobject # Aseg√∫rate de que el nombre del archivo sea correcto

# Carga variables de entorno (ej: desde un archivo .env)
load_dotenv()
SHOP_DOMAIN = os.getenv("SHOPIFY_SHOP_DOMAIN")
ACCESS_TOKEN = os.getenv("SHOPIFY_ACCESS_TOKEN")

if not SHOP_DOMAIN or not ACCESS_TOKEN:
    raise ValueError("Por favor, configura SHOPIFY_SHOP_DOMAIN y SHOPIFY_ACCESS_TOKEN en tus variables de entorno.")

# Inicializa el cargador
loader = ShopifyMetaobjectLoader(
    shop_domain=SHOP_DOMAIN,
    access_token=ACCESS_TOKEN,
    cache_dir=".cache"  # Opcional, para cach√© de API
)
```

---

### –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (con `ShopifyMetaobjectLoader`)

#### üìÑ Cargar Metaobjetos desde CSV

Sube datos desde un archivo CSV a metaobjetos. El CSV **debe** tener una columna `handle`. Las otras columnas ser√°n los campos del metaobjeto.

```python
stats = loader.process_csv(
    file_path="ruta/a/tu/archivo.csv",
    metaobject_type="tu_tipo_de_metaobjeto"  # Ej: "product_specs"
)
print(f"Resultados de la carga: {stats}")
# Output: {'upserted': X, 'failed': Y}
```

#### ‚¨ÜÔ∏è Subir M√∫ltiples Metaobjetos (Upsert por Lotes)

Si ya tienes una lista de objetos `Metaobject` para crear o actualizar.

```python
# Lista de objetos Metaobject
metaobjects_a_subir = [
    Metaobject(type="mi_tipo", handle="handle1", fields={"nombre": "Objeto 1", "valor": 100}),
    Metaobject(type="mi_tipo", handle="handle2", fields={"nombre": "Objeto 2", "valor": 200}),
]

stats = loader.batch_upsert_metaobjects(
    metaobjects=metaobjects_a_subir,
    batch_size=10 # Opcional, por defecto 50
)
print(f"Resultados del upsert por lotes: {stats}")
```

#### üì• Obtener Todos los Metaobjetos de un Tipo

Recupera todos los metaobjetos de un tipo espec√≠fico.

```python
todos_los_objetos = loader.fetch_all_metaobjects(
    metaobject_type="tu_tipo_de_metaobjeto"
)
for obj in todos_los_objetos:
    print(f"ID: {obj['id']}, Handle: {obj['handle']}, Campos: {obj['fields']}")
```

#### üíæ Exportar Metaobjetos a CSV

Obtiene metaobjetos de Shopify y los guarda en un archivo CSV.

```python
loader.fetch_metaobjects_to_csv(
    metaobject_type="tu_tipo_de_metaobjeto",
    output_file="exportacion_metaobjetos.csv",
    include_id=True, # Opcional
    field_order=["handle", "nombre_campo_1", "nombre_campo_2"] # Opcional
)
print("Metaobjetos exportados a exportacion_metaobjetos.csv")
```
o si ya tienes una lista de objetos `Metaobject`:
```python
# Asumiendo que 'lista_de_metaobjetos' es una lista de instancias de Metaobject
# loader.export_metaobjects_to_csv(
#     metaobject_type="tu_tipo_de_metaobjeto", # Necesario para el contexto, aunque los objetos ya existen
#     output_file="exportacion_desde_lista.csv",
#     include_metafields=False # Opcional
# )
# Nota: El m√©todo export_metaobjects_to_csv espera una lista de Metaobject, no dicts.
# Para usarlo, primero necesitar√≠as convertir los dicts de fetch_all_metaobjects a instancias de Metaobject
# o usar fetch_metaobjects_to_csv directamente.
```

#### Îîï Obtener Metaobjetos como Diccionario (Indexado)

Obtiene metaobjetos y los organiza en un diccionario, usando un campo espec√≠fico como clave (ej: `handle`).

```python
objetos_por_handle = loader.fetch_metaobjects_as_dict(
    metaobject_type="tu_tipo_de_metaobjeto",
    key_field="handle" # Puede ser "id" u otra clave de campo
)
# print(objetos_por_handle["algun_handle_especifico"])
```

#### ‚ÑπÔ∏è Describir un Tipo de Metaobjeto

Obtiene y muestra la estructura (definici√≥n) de un tipo de metaobjeto.

```python
# Imprime la descripci√≥n en consola
loader.print_metaobject_type_description(
    metaobject_type="tu_tipo_de_metaobjeto"
)

# Obtiene la descripci√≥n como un diccionario
descripcion = loader.describe_metaobject_type(
    metaobject_type="tu_tipo_de_metaobjeto"
)
# print(json.dumps(descripcion, indent=2))
```

#### ‚öôÔ∏è Crear una Definici√≥n de Metaobjeto

Define un nuevo tipo de metaobjeto en Shopify.

```python
campos_definicion = [
    {"key": "nombre_producto", "name": "Nombre del Producto", "type": "single_line_text_field", "required": True},
    {"key": "descripcion", "name": "Descripci√≥n", "type": "multi_line_text_field"},
    {"key": "stock", "name": "Stock Disponible", "type": "number_integer", "validations": [{"name": "min", "value": "0"}]}
]

nueva_definicion = loader.create_metaobject_definition(
    type_name="custom_product_info", # Nombre t√©cnico (snake_case)
    display_name="Informaci√≥n Custom del Producto", # Nombre legible
    description="Informaci√≥n adicional y personalizada para productos.",
    fields=campos_definicion
)
if nueva_definicion:
    print(f"Definici√≥n creada: {nueva_definicion['type']}")
```

#### ‚ûï Gestionar Metacampos (Metafields) en un Metaobjeto Existente

Necesitar√°s el `ID` del metaobjeto (ej: `gid://shopify/Metaobject/1234567890`) o el `ID` del metadato (ej: `gid://shopify/Metafield/0987654321`).

*   **A√±adir Metacampo:**
    ```python
    metaobject_id_global = "gid://shopify/Metaobject/TU_METAOBJECT_ID" # Reemplazar
    nuevo_metafield = loader.add_metafield(
        metaobject_id=metaobject_id_global,
        key="info_adicional",
        value="Este es un valor de prueba",
        type="single_line_text_field", # Opcional, por defecto "single_line_text_field"
        namespace="custom" # Opcional, por defecto "custom"
    )
    if nuevo_metafield:
        print(f"Metacampo a√±adido: {nuevo_metafield['id']}")
    ```

*   **Modificar Metacampo:**
    ```python
    metafield_id_global = "gid://shopify/Metafield/TU_METAFIELD_ID" # Reemplazar
    metafield_modificado = loader.modify_metafield(
        metafield_id=metafield_id_global,
        value="Nuevo valor actualizado"
        # type="multi_line_text_field" # Opcional, para cambiar el tipo
    )
    if metafield_modificado:
        print(f"Metacampo modificado: {metafield_modificado['id']}")
    ```

*   **Eliminar Metacampo:**
    ```python
    metafield_id_a_eliminar = "gid://shopify/Metafield/TU_METAFIELD_ID" # Reemplazar
    eliminado_exitosamente = loader.delete_metafield(
        metafield_id=metafield_id_a_eliminar
    )
    if eliminado_exitosamente:
        print(f"Metacampo {metafield_id_a_eliminar} eliminado.")
    ```

---

### üß© Trabajar con la Clase `Metaobject`

√ötil para construir metaobjetos en tu c√≥digo antes de enviarlos a Shopify.

```python
mi_objeto = Metaobject(
    type="especificaciones_producto",
    handle="mi-producto-especial-specs",
    fields={
        "color": "Rojo Intenso",
        "material": "Aluminio Reciclado",
        "peso_gramos": 250
    }
)

# Modificar/A√±adir campos
mi_objeto.set_field("peso_gramos", 260)
mi_objeto.set_field("nuevo_campo", "valor nuevo")

# A√±adir metacampos (estos se gestionan de forma diferente en la API al crear el objeto)
# Para la creaci√≥n inicial, los campos del metaobjeto son suficientes.
# Los metacampos se a√±aden/modifican despu√©s con loader.add_metafield() etc.
# mi_objeto.set_metafield(key="custom_note", value="Nota especial", type="string")

# Obtener datos del objeto
print(mi_objeto.get_field("color"))
print(mi_objeto.to_dict())

# Para usarlo con batch_upsert_metaobjects:
# loader.batch_upsert_metaobjects([mi_objeto])
```

---

### üìù Puntos Clave / Recordatorios

*   **Credenciales:** Aseg√∫rate de que `SHOPIFY_SHOP_DOMAIN` y `SHOPIFY_ACCESS_TOKEN` est√©n configurados correctamente.
*   **Handles:** Los `handles` son identificadores √∫nicos y legibles para los metaobjetos dentro de un tipo. Son cruciales para las operaciones de `upsert`.
*   **Tipos de Metaobjeto:** Las operaciones suelen requerir el `metaobject_type` (ej: `product_features`, `brand_details`).
*   **IDs Globales de Shopify:** Para operaciones espec√≠ficas como a√±adir/modificar metacampos, necesitar√°s los IDs globales de Shopify (ej: `gid://shopify/Metaobject/123...`).
*   **L√≠mites de la API:** El m√≥dulo tiene reintentos para errores de l√≠mite de velocidad, pero ten en cuenta los l√≠mites de la API de Shopify para operaciones masivas.
*   **Errores:** Revisa los logs (`logger`) y las estad√≠sticas devueltas por las funciones para identificar problemas.

---

¬°Esta chuleta deber√≠a ayudarte a empezar r√°pidamente! Para detalles m√°s exhaustivos sobre par√°metros o comportamientos espec√≠ficos, consulta la documentaci√≥n completa del m√≥dulo.